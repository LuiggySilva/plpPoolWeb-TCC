# Generated by Django 3.2.16 on 2022-11-10 21:56

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, verbose_name='Nome')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('slug', models.SlugField(max_length=150)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Linguagem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50)),
                ('extensao', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^.{1}[a-z]*$', 'Formato de extensão inválido')], verbose_name='Extensão')),
                ('compilador', models.BooleanField(default=False)),
                ('executar', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Linguagem',
                'verbose_name_plural': 'Linguagens',
            },
        ),
        migrations.CreateModel(
            name='Periodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[0-9]{4}.[0-9][a-zA-z]?$', 'Formato de período inválido')], verbose_name='Período')),
                ('ativo', models.BooleanField(default=True, help_text='Indica que o período está ativo. Apenas um período pode estar ativo.')),
            ],
            options={
                'verbose_name': 'Período',
                'verbose_name_plural': 'Períodos',
            },
        ),
        migrations.CreateModel(
            name='Questao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enunciado', models.CharField(max_length=150)),
                ('codigo', models.TextField(verbose_name='Código')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('tipo', models.CharField(choices=[('Básica', 'Básica'), ('Avançada', 'Avançada')], default='Básica', max_length=10)),
                ('linguagem', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='plpPool.linguagem')),
                ('periodo', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to='plpPool.periodo')),
            ],
            options={
                'verbose_name': 'Questão',
                'verbose_name_plural': 'Questões',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='plpPool.user')),
                ('matricula', models.CharField(max_length=9, unique=True, validators=[django.core.validators.RegexValidator('^\\d{9}$', 'Formato de matrícula inválido')], verbose_name='Matrícula')),
            ],
            options={
                'verbose_name': 'Monitor',
                'verbose_name_plural': 'Monitores',
            },
            bases=('plpPool.user',),
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='plpPool.user')),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professores',
            },
            bases=('plpPool.user',),
        ),
        migrations.CreateModel(
            name='Teste',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entrada', models.TextField()),
                ('saida', models.TextField(verbose_name='Saída')),
                ('tipo', models.CharField(choices=[('Público', 'Público'), ('Privado', 'Privado')], default='Privado', max_length=7)),
                ('questao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testes', to='plpPool.questao')),
            ],
            options={
                'verbose_name': 'Teste',
                'verbose_name_plural': 'Testes',
            },
        ),
        migrations.AddField(
            model_name='questao',
            name='tags',
            field=models.ManyToManyField(related_name='tags', to='plpPool.Tag'),
        ),
        migrations.CreateModel(
            name='Atividade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qtd_basicas', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Questões básicas')),
                ('qtd_avancadas', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Questões avançadas')),
                ('data', models.DateField()),
                ('descricao', models.TextField(max_length=200, verbose_name='Descrição')),
                ('linguagem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='plpPool.linguagem')),
                ('periodo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='plpPool.periodo')),
            ],
            options={
                'verbose_name': 'Atividade',
                'verbose_name_plural': 'Atividades',
            },
        ),
        migrations.AddField(
            model_name='questao',
            name='autor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='plpPool.monitor'),
        ),
        migrations.AddField(
            model_name='periodo',
            name='monitores',
            field=models.ManyToManyField(to='plpPool.Monitor'),
        ),
    ]
